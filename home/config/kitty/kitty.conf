# vim:fileencoding=utf-8:ft=conf

## Fonts
# kitty has very powerful font management. You can configure
# individual font faces and even specify special fonts for particular
# characters.

font_family      Monospace
font_family      Roboto Mono
italic_font      auto
bold_font        auto
bold_italic_font auto

adjust_line_height  0
adjust_column_width 0

# Font size (in pts)
font_size        14.0


## Cursor

# The cursor color
cursor           #dcdccc

# The color of the text under cursor
#cursor_text_color #131313
cursor_text_color background

# The cursor shape can be one of (block, beam, underline)
cursor_shape     block

# Defines the thickness of the beam cursor (in pts)
cursor_beam_thickness 1.5

# Defines the thickness of the underline cursor (in pts)
cursor_underline_thickness 1.5

# The interval (in seconds) at which to blink the cursor. Set to zero to
# disable blinking.
cursor_blink_interval     0.5

# Stop blinking cursor after the specified number of seconds of keyboard inactivity. Set to
# zero or a negative number to never stop blinking.
cursor_stop_blinking_after 0

# Number of lines of history to keep in memory for scrolling back
scrollback_lines 2500

# Program with which to view scrollback in a new window. The
# scrollback buffer is passed as STDIN to this program. If you change
# it, make sure the program you use can handle ANSI escape sequences
# for colors and text formatting. INPUT_LINE_NUMBER in the command
# line above will be replaced by an integer representing which line
# should be at the top of the screen. Similarly CURSOR_LINE and
# CURSOR_COLUMN will be replaced by the current cursor position.

#scrollback_pager less +G -R
scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER

# Modify the amount scrolled by the mouse wheel. Note this is only
# used for low precision scrolling devices, not for high precision
# scrolling on platforms such as macOS and Wayland. Use negative
# numbers to change scroll direction.

wheel_scroll_multiplier 5.0


## Mouse

# Hide mouse cursor after the specified number of seconds of the mouse not being used.
# Set to zero to disable mouse cursor hiding.
# Set to a negative value to hide the mouse cursor immediately when typing text.
mouse_hide_wait 0.0

# The color and style for highlighting URLs on mouse-over. url_style
# can be one of: none, single, double, curly
url_color #1e90ff
url_style curly

# The modifier keys to press when clicking with the mouse on URLs to open the URL
#open_url_modifiers ctrl+shift
open_url_modifiers ctrl

# The program with which to open URLs that are clicked on. The special value "default" means to
# use the operating system's default URL handler.
open_url_with default

# The set of URL prefixes to look for when detecting a URL under the
# mouse cursor.
url_prefixes http https file ftp

# Detect URLs under the mouse. Detected URLs are highlighted with an
# underline and the mouse cursor becomes a hand over them. Even if
# this option is disabled, URLs are still clickable.
detect_urls yes

# Copy to clipboard or a private buffer on select. With this set to
# clipboard, simply selecting text with the mouse will cause the text
# to be copied to clipboard. Useful on platforms such as macOS that
# do not have the concept of primary selections. You can instead
# specify a name such as a1 to copy to a private kitty buffer
# instead. Map a shortcut with the paste_from_buffer action to paste
# from this private buffer. For example::

copy_on_select yes
#map ctrl+alt+v paste_from_buffer a1

# Remove spaces at the end of lines when copying to clipboard. A
# value of smart will do it when using normal selections, but not
# rectangle selections. always will always do it.
strip_trailing_spaces always

# Characters considered part of a word when double clicking. In addition to these characters
# any character that is marked as an alpha-numeric character in the unicode
# database will be matched.
select_by_word_characters :@-./_~?&=%+#

# The interval between successive clicks to detect double/triple clicks (in seconds)
click_interval 0.5


# Set the active window to the window under the mouse when moving the
# mouse around
focus_follows_mouse yes


# The shape of the mouse pointer when the program running in the
# terminal grabs the mouse. Valid values are: arrow, beam and hand
pointer_shape_when_grabbed arrow

# The default shape of the mouse pointer. Valid values are: arrow,
# beam and hand
default_pointer_shape beam

# The default shape of the mouse pointer when dragging across text.
# Valid values are: arrow, beam and hand
pointer_shape_when_dragging beam


## Performance

# Delay (in milliseconds) between screen updates. Decreasing it, increases fps
# at the cost of more CPU usage. The default value yields ~100fps which is more
# that sufficient for most uses.
# repaint_delay    10
repaint_delay    10

# Delay (in milliseconds) before input from the program running in the terminal
# is processed. Note that decreasing it will increase responsiveness, but also
# increase CPU usage and might cause flicker in full screen programs that
# redraw the entire screen on each loop, because kitty is so fast that partial
# screen updates will be drawn.
input_delay 3


# Sync screen updates to the refresh rate of the monitor. This
# prevents tearing (https://en.wikipedia.org/wiki/Screen_tearing)
# when scrolling. However, it limits the rendering speed to the
# refresh rate of your monitor. With a very high speed mouse/high
# keyboard repeat rate, you may notice some slight input latency. If
# so, set this to no.
sync_to_monitor yes


## Terminal bell

# Visual bell duration. Flash the screen when a bell occurs for the specified number of
# seconds. Set to zero to disable.
visual_bell_duration 0.0

# Enable/disable the audio bell. Useful in environments that require silence.
enable_audio_bell no

# Request window attention on bell. Makes the dock icon bounce on
# macOS or the taskbar flash on linux.
window_alert_on_bell yes

# Show a bell symbol on the tab if a bell occurs in one of the
# windows in the tab and the window is not the currently focused
# window
bell_on_tab yes


## Window layout

# The enabled window layouts. A comma separated list of layout names. The special value * means
# all layouts. The first listed layout will be used as the startup layout.
# For a list of available layouts, see the file layouts.py
#enabled_layouts *
enabled_layouts Grid,Fat,Tall

# If enabled, the window size will be remembered so that new instances of kitty will have the same
# size as the previous instance. If disabled, the window will initially have size configured
# by initial_window_width/height, in pixels.
remember_window_size   yes
initial_window_width   640
initial_window_height  400



# The width (in pts) of window borders. Will be rounded to the nearest number of pixels based on screen resolution.
window_border_width 2pt

# The window margin (in pts) (blank area outside the border). A
# single value sets all four sides.
window_margin_width 0

# Draw only the minimum borders needed. This means that only the
# minimum needed borders for inactive windows are drawn. That is only
# the borders that separate the inactive window from a neighbor. Note
# that setting a non-zero window margin overrides this and causes all
# borders to be drawn.
draw_minimal_borders yes

# The window margin (in pts) to use when only a single window is
# visible. Negative values will cause the value of
# window_margin_width to be used instead.
single_window_margin_width -1

# The color for the border of the active window
active_border_color #16a085

# The color for the border of inactive windows
inactive_border_color #3f3f3f


# The color for the border of inactive windows in which a bell has
# occurred
bell_border_color #dc322f


# Hide the window decorations (title-bar and window borders) with
# yes. On macOS, titlebar-only can be used to only hide the titlebar.
# Whether this works and exactly what effect it has depends on the
# window manager/operating system.
hide_window_decorations no

## Tab bar

# Which edge to show the tab bar on, top or bottom
tab_bar_edge bottom

# The margin to the left and right of the tab bar (in pts)
tab_bar_margin_width 2.0

# The tab bar style, can be one of: fade, separator, powerline, or
# hidden. In the fade style, each tab's edges fade into the
# background color, in the separator style, tabs are separated by a
# configurable separator, and the powerline shows the tabs as a
# continuous line. If you use the hidden style, you might want to
# create a mapping for the select_tab action which presents you with
# a list of tabs and allows for easy switching to a tab.
tab_bar_style fade


# The minimum number of tabs that must exist before the tab bar is
# shown
tab_bar_min_tabs 2

# Control how each tab fades into the background when using fade for
# the tab_bar_style. Each number is an alpha (between zero and one)
# that controls how much the corresponding cell fades into the
# background, with zero being no fade and one being full fade. You
# can change the number of cells used by adding/removing entries to
# this list.
tab_fade 0.25 0.5 0.75 1

# The separator between tabs in the tab bar when using separator as
# the tab_bar_style.
tab_separator " â”‡"



# A template to render the tab title. The default just renders the
# title. If you wish to include the tab-index as well, use something
# like: {index}: {title}. Useful if you have shortcuts mapped for
# goto_tab N. In addition you can use {layout_name} for the current
# layout name and {num_windows} for the number of windows in the tab.
# Note that formatting is done by Python's string formatting
# machinery, so you can use, for instance, {layout_name[:2].upper()}
# to show only the first two letters of the layout name, upper-cased.
# If you want to style the text, you can use styling directives, for
# example: {fmt.fg.red}red{fmt.fg.default}normal{fmt.bg._00FF00}green
# bg{fmt.bg.normal}. Similarly, for bold and italic:
# {fmt.bold}bold{fmt.nobold}normal{fmt.italic}italic{fmt.noitalic}.
tab_title_template "{title}"


# Template to use for active tabs, if not specified falls back to
# tab_title_template.
active_tab_title_template none

# Tab-bar colors
active_tab_foreground #dcdccc
active_tab_background #1e90ff
active_tab_font_style   bold
inactive_tab_foreground #252525
inactive_tab_background #757575
inactive_tab_font_style normal


## Color scheme

# The foreground color
foreground       #dcdccc

# The background color
background      #131313

# The foreground for text selected with the mouse. A value of none
# means to leave the color unchanged.
selection_foreground #252525

# The background for text selected with the mouse.
selection_background #757575

# The 256 terminal colors. There are 8 basic colors, each color has a
# dull and bright version, for the first 16 colors. You can set the
# remaining 240 colors as color16 to color255.

color0 #000000
color8 #757575
color7   #93a1a1
color15  #fdf6e3

# Red
color1   #dc322f
color9   #dc322f

# Pale green
color2   #98FB98

#Emerald
color10  #009874

# Orange
color3   #ffa500
color11  #ffa500

# Blue
#color4   #409fff
#color12  #409fff

color4   #1e90ff
color12  #1e90ff

# Purple
#color5   #6c71c4
#color13  #6c71c4

# Lavender
color5   #9966ff
color13  #9966ff

# Teal
#color6   #16a085
#color14  #16a085

# Robin egg
color6   #00cccc
color14  #00cccc

# Extra colors
color16  #cb4b16
color17  #d33682
color18  #073642
color19  #586e75
color20  #839496
color21  #eee8d5



## Key mapping
# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html
# You can use the special action no_op to unmap a keyboard shortcut that is
# assigned in the default configuration.

kitty_mod alt

# Clipboard
#map super+v             paste_from_clipboard
#map ctrl+shift+s        paste_from_selection
#map super+c             copy_to_clipboard
#map shift+insert        paste_from_selection
map ctrl+shift+v         paste_from_clipboard
map ctrl+shift+c         copy_to_clipboard

# Scrolling
#map ctrl+shift+up        scroll_line_up
#map ctrl+shift+down      scroll_line_down
#map ctrl+shift+k         scroll_line_up
#map ctrl+shift+j         scroll_line_down
#map ctrl+shift+page_up   scroll_page_up
#map ctrl+shift+page_down scroll_page_down
#map ctrl+shift+home      scroll_home
#map ctrl+shift+end       scroll_end
#map ctrl+shift+h         show_scrollback
map kitty_mod+up        scroll_line_up
map kitty_mod+down      scroll_line_down
map kitty_mod+page_up   scroll_page_up
map kitty_mod+page_down scroll_page_down
map kitty_mod+end       scroll_end
map kitty_mod+f         show_scrollback

# Window management
#map super+n             new_os_window
#map super+w             close_window
#map ctrl+shift+enter    new_window
#map ctrl+shift+]        next_window
#map ctrl+shift+[        previous_window
#map ctrl+shift+f        move_window_forward
#map ctrl+shift+b        move_window_backward
#map ctrl+shift+`        move_window_to_top
#map ctrl+shift+1        first_window
#map ctrl+shift+2        second_window
#map ctrl+shift+3        third_window
#map ctrl+shift+4        fourth_window
#map ctrl+shift+5        fifth_window
#map ctrl+shift+6        sixth_window
#map ctrl+shift+7        seventh_window
#map ctrl+shift+8        eighth_window
#map ctrl+shift+9        ninth_window
#map ctrl+shift+0        tenth_window

map kitty_mod+enter          new_window
map kitty_mod+q              close_window
map kitty_mod+l              next_window
map kitty_mod+h              previous_window
map kitty_mod+shift+enter    new_window_with_cwd

# Tab management
map kitty_mod+right          next_tab
map kitty_mod+left           previous_tab
map kitty_mod+t              new_tab
map kitty_mod+w              close_tab
map kitty_mod+k              next_tab
map kitty_mod+j              previous_tab
map kitty_mod+shit+t         new_tab_with_cwd
#map ctrl+shift+right    next_tab
#map ctrl+shift+left     previous_tab
#map ctrl+shift+t        new_tab
#map ctrl+shift+q        close_tab
map kitty_mod+shift+l        next_layout
#map ctrl+shift+.        move_tab_forward
#map ctrl+shift+,        move_tab_backward

# Font size
map kitty_mod+shift+up      increase_font_size
map kitty_mod+shift+down    decrease_font_size
map kitty_mod+shift+backspace restore_font_size

# Miscellaneous
map kitty_mod+f11    toggle_fullscreen
map kitty_mod+f10    toggle_maximized

## Advanced

# Allow other programs to control kitty. If you turn this on other
# programs can control all aspects of kitty, including sending text
# to kitty windows, opening new windows, closing windows, reading the
# content of windows, etc.  Note that this even works over ssh
# connections. You can chose to either allow any program running
# within kitty to control it, with yes or only programs that connect
# to the socket specified with the kitty --listen-on command line
# option, if you use the value socket-only. The latter is useful if
# you want to prevent programs running on a remote computer over ssh
# from controlling kitty.
allow_remote_control no

# Close the window when the child process (shell) exits. If no (the
# default), the terminal will remain open when the child exits as
# long as there are still processes outputting to the terminal (for
# example disowned or backgrounded processes). If yes, the window
# will close as soon as the child process exits. Note that setting it
# to yes means that any background processes still using the terminal
# can fail silently because their stdout/stderr/stdin no longer work.
close_on_child_death no

# Process hyperlink (OSC 8) escape sequences. If disabled OSC 8
# escape sequences are ignored. Otherwise they become clickable
# links, that you can click by holding down ctrl+shift and clicking
# with the mouse. The special value of ``ask`` means that kitty will
# ask before opening the link.
allow_hyperlinks yes



# The value of the TERM environment variable to set. Changing this
# can break many terminal programs, only change it if you know what
# you are doing, not because you read some advice on Stack Overflow
# to change it. The TERM variable is used by various programs to get
# information about the capabilities and behavior of the terminal. If
# you change it, depending on what programs you run, and how
# different the terminal you are changing it to is, various things
# from key-presses, to colors, to various advanced features may not
# work.
term xterm-kitty

# Change the color of the kitty window's titlebar on macOS. A value of "system"
# means to use the default system color, a value of "background" means to use
# the default background color and finally you can use an arbitrary color, such
# as #16a085 or "red".
macos_titlebar_color background
